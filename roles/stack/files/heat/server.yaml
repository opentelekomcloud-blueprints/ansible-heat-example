---
# Heat stack server

heat_template_version: 2016-04-08

description:
  Server template

parameters:

  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    default: admin_external_net
    constraints:
    - custom_constraint: neutron.network

  network:
    description: >
      The name or ID of the internal network
    type: string
    constraints:
    - custom_constraint: neutron.network

  subnet:
    description: >
      The name or ID of the internal subnet
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  security_groups:
    description: List of security groups
    type: comma_delimited_list

  hostname:
    description: The hostname
    type: string

  domain_name:
    type: string
    description: >
      Domain name for instances

  flavor:
    type: string
    description: >
      Flavor for the server
    constraints:
      - custom_constraint: nova.flavor

  image:
    type: string
    description: >
      Image for the server
    constraints:
      - custom_constraint: glance.image

  keypair_name:
    type: string
    description: >
      KeyPair for the server
    constraints:
      - custom_constraint: nova.keypair

  root_volume_size:
    type: number
    description: >
      Size of the root partition for server
    default: 10
    constraints:

  metadata:
    type: json
    description: server metadata

  common_role_name:
    type: string
    description: Ansible-galaxy name of the common role

  config_repo:
    type: string
    description: git repo of the configuration (will be polled periodically)

resources:

  server:
    type: Heat::OTC::Server
    properties:
      hostname: { get_param: hostname }
      domain_name: { get_param: domain_name }
      network: { get_param: network }
      subnet: { get_param: subnet }
      image: { get_param: image }
      flavor: { get_param: flavor }
      keypair_name: { get_param: keypair_name }
      root_volume_size: { get_param: root_volume_size }
      security_groups: { get_param: security_groups }
      metadata: { get_param: metadata }

  floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: server
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_attr: [ server, port ] }

  roles_apply_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: common_role_name
        - name: config_repo
      config: |
        ---
        - name: Apply Server Role
          hosts: localhost
          connection: local
          roles:
            - { role: '{{ common_role_name }}' }
          tasks:
            - name: Install cronie
              package:
                name: "cronie"
                state: present
            - name: enable cron
              systemd:
                daemon_reload: yes
                name: crond
                state: started
                enabled: yes
            - name: Enable self-polling of configuration
              cron:
                name: "ansible_config_poll"
                minute: "*/2"
                state: present
                job: "ansible-pull -d ~/workspace/pull_dir -U {{config_repo}} -o -e @~/variables.yaml"

  roles_apply_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on:
      - server
      - prepare_installer_deployment
      - roles_apply_config
    properties:
      name: roles_apply_deployment
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: roles_apply_config }
      input_values:
        common_role_name: { get_param: common_role_name }
        config_repo: { get_param: config_repo }
      server: { get_attr: [ server, id ] }

  prepare_installer_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: galaxy_roles
          type: CommaDelimitedList
          description: List of galaxy roles to fetch
      config: |
        #!/bin/bash -x

        roles=${galaxy_roles//[\"\[\]]/}
        IFS=","
        for role in $roles; do
          echo "Installing galaxy role: ${role}"
          ansible-galaxy install ${role}
        done

        echo "secret: ${RANDOM}" > ~/variables.yaml

  prepare_installer_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on:
      - server
      - prepare_installer_config
    properties:
      name: prepare_installer_deployment
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: prepare_installer_config }
      input_values:
        galaxy_roles:
          - { get_param: common_role_name }
      server: { get_attr: [ server, id ] }

outputs:
  OS::stack_id:
    value: { get_resource: server }
  server:
    description: Server information
    value: { get_attr: [ server ] }
  public_ip:
    description: Public IP of the server
    value: { get_attr: [ floating_ip, floating_ip_address ] }
  roles_apply_deployment:
    description: output of the roles_apply deployment
    value:
      deploy_status_code: { get_attr: [roles_apply_deployment, deploy_status_code] }
      deploy_stderr: { get_attr: [roles_apply_deployment, deploy_stderr] }
      deploy_stdout: { get_attr: [roles_apply_deployment, deploy_stdout] }
  prepare_installer_deployment:
    description: output of the prepare_installer_deployment deployment
    value:
      deploy_status_code: { get_attr: [prepare_installer_deployment, deploy_status_code] }
      deploy_stderr: { get_attr: [prepare_installer_deployment, deploy_stderr] }
      deploy_stdout: { get_attr: [prepare_installer_deployment, deploy_stdout] }
